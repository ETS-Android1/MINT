Index: app/src/main/java/com/example/helloworld/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.helloworld;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Dialog;\r\nimport android.app.TimePickerDialog;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.location.Address;\r\nimport android.location.Geocoder;\r\nimport android.location.Location;\r\nimport android.location.LocationListener;\r\nimport android.location.LocationManager;\r\nimport android.content.DialogInterface;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Rect;\r\nimport android.os.Bundle;\r\nimport android.preference.PreferenceManager;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.util.Pair;\r\nimport android.view.Gravity;\r\nimport android.view.LayoutInflater;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.view.WindowManager;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.CalendarView;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ListView;\r\nimport android.widget.PopupWindow;\r\nimport android.widget.TextView;\r\nimport android.widget.TimePicker;\r\nimport android.widget.Toast;\r\n\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\nimport org.osmdroid.api.IMapController;\r\nimport org.osmdroid.config.Configuration;\r\nimport org.osmdroid.tileprovider.tilesource.TileSourceFactory;\r\nimport org.osmdroid.util.GeoPoint;\r\nimport org.osmdroid.views.MapView;\r\n\r\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener, View.OnFocusChangeListener, LocationListener {\r\n    private final int REQUEST_PERMISSIONS_REQUEST_CODE = 1;\r\n    private MapView map;\r\n    IMapController mapController;\r\n    private EditText startPoint;\r\n    private EditText startPoint2; // for starPoint/endPoint inversion\r\n    private EditText endPoint;\r\n    private View dimPopup;\r\n    private EditText latitude;\r\n    private EditText longitude;\r\n    private ImageButton inversionButton;\r\n    private Button search;\r\n    private final int POSITION_PERMISSION_CODE = 1;\r\n    private Button option;\r\n    private Button dateBtn;\r\n    private Button timeBtn;\r\n    boolean GpsStatus = false; //true if the user's location is activated on the phone\r\n\r\n    ArrayList<String> lastAddressList;\r\n    ArrayList<String> addressList;\r\n    ListView addressListView;\r\n    String start;\r\n    String end;\r\n\r\n    private Double pdaLat;\r\n    private Double pdaLong;\r\n    private Double pddLat;\r\n    private Double pddLong;\r\n\r\n    EditText buttonClicked;\r\n    PopupWindow popUp;\r\n    PopupWindow popUpCalendar;\r\n    LocationManager locationManager;\r\n    TimePicker timePicker;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        //Preferences.clearLastAddresses(this);\r\n\r\n        startPoint = findViewById(R.id.PointDeDepart);\r\n        endPoint = findViewById(R.id.PointDarrivee);\r\n        search = findViewById(R.id.recherche);\r\n        option = findViewById(R.id.options);\r\n        dimPopup = findViewById(R.id.dim_popup);\r\n\r\n        start = startPoint.getText().toString();\r\n        end = endPoint.getText().toString();\r\n\r\n\r\n\r\n        // check if the editText is empty and if so disable add button\r\n        TextWatcher textChangedListener = new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                search.setEnabled(s.toString().length()!=0);\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable s) {\r\n\r\n            }\r\n        };\r\n\r\n        // sets the callbacks for when the prompts are selected\r\n        startPoint.setOnFocusChangeListener(this);\r\n        startPoint.addTextChangedListener(textChangedListener);\r\n        endPoint.setOnFocusChangeListener(this);\r\n        endPoint.addTextChangedListener(textChangedListener);\r\n        search.setOnClickListener(this);\r\n        option.setOnClickListener(this);\r\n\r\n        // set the tags for when onClick is called\r\n        startPoint.setTag(0);\r\n        endPoint.setTag(1);\r\n        search.setTag(2);\r\n        option.setTag(3);\r\n\r\n        Context context = getApplicationContext();\r\n        Configuration.getInstance().load(context, PreferenceManager.getDefaultSharedPreferences(getApplicationContext()));\r\n\r\n        //Map\r\n        map = findViewById(R.id.mapView);\r\n        map.setTileSource(TileSourceFactory.MAPNIK); //render\r\n        map.setMultiTouchControls(true);\r\n        GeoPoint startPoint = new GeoPoint(47.21, -1.55);\r\n        mapController = map.getController();\r\n        mapController.setZoom(15.0);\r\n        mapController.setCenter(startPoint);\r\n\r\n        //Bottom Menu\r\n        BottomNavigationView bottomNav = findViewById(R.id.bottom_navigation);\r\n        bottomNav.setOnNavigationItemSelectedListener(new ActivityMenuSwitcher(this));\r\n        bottomNav.setItemIconTintList(null);\r\n        Menu menu = bottomNav.getMenu();\r\n        MenuItem menuItem = menu.getItem(0);\r\n        menuItem.setChecked(true);\r\n\r\n        //Slide animation\r\n        bottomNav.setSelectedItemId(R.id.itineraire);\r\n\r\n        bottomNav.setOnNavigationItemSelectedListener (new BottomNavigationView.OnNavigationItemSelectedListener() {\r\n            @Override\r\n            public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {\r\n                switch (menuItem.getItemId()) {\r\n                    case R.id.itineraire:\r\n                        return true;\r\n                    case R.id.cartes:\r\n                        startActivity(new Intent(getApplicationContext(),MapActivity.class));\r\n                        overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left);\r\n                        return true;\r\n                    case R.id.profil:\r\n                        startActivity(new Intent(getApplicationContext(),ProfileActivity.class));\r\n                        overridePendingTransition(R.anim.slide_in_right,R.anim.slide_out_left);\r\n                        return true;\r\n                    default:\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n\r\n    // function that creates the popup window on selection of editTexts\r\n    private PopupWindow showFavoriteAddresses() {\r\n\r\n        // initialize a pop up window type\r\n        PopupWindow popupWindow = new PopupWindow(this);\r\n\r\n        lastAddressList = Preferences.getLastAddresses(\"lastAddress\",this);\r\n        addressList = Preferences.getPrefAddresses(\"Address\", this);\r\n        lastAddressList.add(0,\"Mes derni√®res adresses :\");\r\n        addressList.add(0,\"Mes adresses favorites :\");\r\n\r\n        addressList.addAll(0,lastAddressList);\r\n\r\n        CustomListAdapter adapter = new CustomListAdapter(this, addressList);\r\n\r\n        addressListView = new ListView(this);\r\n\r\n        // add location button to the list\r\n        TextView localisationRequest = new TextView(this);\r\n        localisationRequest.setText(R.string.position_request);\r\n        localisationRequest.setPadding(30,30,30,0);\r\n        addressListView.addHeaderView(localisationRequest);\r\n        addressListView.setHeaderDividersEnabled(false);\r\n\r\n        // set our adapter and pass our pop up window contents\r\n        addressListView.setAdapter(adapter);\r\n        addressListView.setDivider(null);\r\n        addressListView.setDividerHeight(0);\r\n\r\n        // set on item selected\r\n        addressListView.setOnItemClickListener(onItemClickListener());\r\n\r\n        //User's location\r\n        localisationRequest.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                // We need this parameters to check if the GPS of the phone is activated\r\n                locationManager = (LocationManager) getApplicationContext().getSystemService(LOCATION_SERVICE);\r\n                assert locationManager != null;\r\n                GpsStatus = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);\r\n\r\n                // If the permission to access to the user's location is already allowed, we use it\r\n                if (ContextCompat.checkSelfPermission(MainActivity.this,\r\n                        Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\r\n\r\n                    // We also need that the GPS' phone is activated. We check this here.\r\n                    if (GpsStatus){\r\n                        popUp.dismiss();\r\n                        getLocation();\r\n                    }\r\n\r\n                    // If the GPS' phone is NOT activated, we ask him/her to activate it\r\n                    else {\r\n                        showAlertMessageNoGps();\r\n                    }\r\n                }\r\n\r\n                // If we don't have the permission, we ask the permission to use his location\r\n                else {\r\n                    requestLocalisationPermission();\r\n                }\r\n            }\r\n        });\r\n\r\n        // some other visual settings for popup window\r\n        popupWindow.setFocusable(false);\r\n        popupWindow.setWidth((int)getResources().getDimension(R.dimen.start_point_width));\r\n        popupWindow.setBackgroundDrawable(getResources().getDrawable(R.drawable.layout_bg_popup));\r\n        popupWindow.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);\r\n\r\n        // set the listview as popup content\r\n        popupWindow.setContentView(addressListView);\r\n\r\n        // startPoint/endPoint inversion\r\n        inversionButton = findViewById(R.id.inversion);\r\n        inversionButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                //startPoint2.setText(startPoint.getText());$\r\n                Editable startText = startPoint.getText();\r\n                Editable endText = endPoint.getText();\r\n                endPoint.setText(startText);\r\n                startPoint.setText(endText);\r\n            }\r\n        });\r\n\r\n        return popupWindow;\r\n    }\r\n\r\n    private PopupWindow showOptions() {\r\n        // create the views for both popUpWindows\r\n        LayoutInflater inflater = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);\r\n        final View optionPopupView = inflater.inflate(R.layout.popup_activity_main_options,null);\r\n        final View calendarPopupView = inflater.inflate(R.layout.popup_options_calendar,null);\r\n\r\n        // create popUpWindows\r\n        PopupWindow popupOptions = new PopupWindow(this);\r\n        popupOptions.setFocusable(true);\r\n        popupOptions.setBackgroundDrawable(null);\r\n        popupOptions.setContentView(optionPopupView);\r\n\r\n        // remove background dimness on dismiss\r\n        popupOptions.setOnDismissListener(new PopupWindow.OnDismissListener() {\r\n            @Override\r\n            public void onDismiss() {\r\n                dimPopup.setVisibility(View.INVISIBLE);\r\n            }\r\n        });\r\n\r\n        // get id of transportation buttons\r\n        ImageButton carButton = optionPopupView.findViewById(R.id.car_button);\r\n        ImageButton tramButton = optionPopupView.findViewById(R.id.tram_button);\r\n        ImageButton bikeButton = optionPopupView.findViewById(R.id.bike_button);\r\n        ImageButton walkButton = optionPopupView.findViewById(R.id.walk_button);\r\n\r\n        // set tags for the onClick callback\r\n        carButton.setTag(4);\r\n        tramButton.setTag(5);\r\n        bikeButton.setTag(6);\r\n        walkButton.setTag(7);\r\n\r\n        // create the new onClick callback\r\n        View.OnClickListener onTransportationClick = new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                int i = (int) v.getTag();\r\n                ImageButton buttonClicked = optionPopupView.findViewWithTag(i);\r\n                buttonClicked.setActivated(!buttonClicked.isActivated());\r\n            }\r\n        };\r\n\r\n        // assign the onClick callback\r\n        carButton.setOnClickListener(onTransportationClick);\r\n        tramButton.setOnClickListener(onTransportationClick);\r\n        bikeButton.setOnClickListener(onTransportationClick);\r\n        walkButton.setOnClickListener(onTransportationClick);\r\n\r\n        // get current date and time\r\n        final Calendar cldr = Calendar.getInstance();\r\n        int year = cldr.get(Calendar.YEAR);\r\n        int month = cldr.get(Calendar.MONTH);\r\n        int day = cldr.get(Calendar.DAY_OF_MONTH);\r\n        int hour = cldr.get(Calendar.HOUR_OF_DAY);\r\n        int minutes = cldr.get(Calendar.MINUTE);\r\n\r\n        // set default date and time to current date and time\r\n        dateBtn = optionPopupView.findViewById(R.id.date_calendar);\r\n        String defaultDate = String.format(\"%02d\",day) + \"/\" + String.format(\"%02d\",(month+1)) + \"/\" + year;\r\n        dateBtn.setText(defaultDate);\r\n\r\n        timeBtn = optionPopupView.findViewById(R.id.time_text);\r\n        String defaultTime = String.format(\"%02d\",hour) + \":\" + String.format(\"%02d\",minutes);\r\n        timeBtn.setText(defaultTime);\r\n\r\n        // set date\r\n        dateBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                popUpCalendar = new PopupWindow(MainActivity.this);\r\n                popUpCalendar.setFocusable(true);\r\n                popUpCalendar.setBackgroundDrawable(null);\r\n                popUpCalendar.setContentView(calendarPopupView);\r\n                popUpCalendar.showAtLocation(getWindow().getDecorView(), Gravity.CENTER,0,0);\r\n\r\n                CalendarView calendarView = calendarPopupView.findViewById(R.id.calendar);\r\n\r\n                calendarView.setOnDateChangeListener(new CalendarView.OnDateChangeListener() {\r\n                    @Override\r\n                    public void onSelectedDayChange(@NonNull CalendarView view, int year, int month, int dayOfMonth) {\r\n                        String dateText =  String.format(\"%02d\",dayOfMonth) + \"/\" +  String.format(\"%02d\",(month+1)) + \"/\" + year;\r\n                        dateBtn.setText(dateText);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        // set time\r\n        final Dialog timeDialog = new Dialog(this);\r\n        timeDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n        timeDialog.setContentView(R.layout.popup_options_timepicker);\r\n        timeBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                // time picker dialog\r\n                timePicker = timeDialog.findViewById(R.id.time_picker);\r\n                timePicker.setIs24HourView(true);\r\n                timePicker.setOnTimeChangedListener(new TimePicker.OnTimeChangedListener() {\r\n                    @Override\r\n                    public void onTimeChanged(TimePicker view, int hourOfDay, int minute) {\r\n                        String time = String.format(\"%02d\",hourOfDay) + \":\" + String.format(\"%02d\",minute);\r\n                        timeBtn.setText(time);\r\n                    }\r\n                });\r\n                timeDialog.show();\r\n                timeDialog.setTitle(\"Choisissez une heure de d√©part\");\r\n                timeDialog.getWindow().setBackgroundDrawable(new ColorDrawable(android.graphics.Color.TRANSPARENT));\r\n            }\r\n        });\r\n\r\n        // the buttons for selecting of you want start time or end time. start time is automatically selected\r\n        Button startTime = optionPopupView.findViewById(R.id.start_time);\r\n        startTime.setActivated(true);\r\n        Button endTime = optionPopupView.findViewById(R.id.end_time);\r\n        startTime.setTag(8);\r\n        endTime.setTag(9);\r\n\r\n        // actions when either start or end time is clicked (unclicks the other one)\r\n        View.OnClickListener onStartEndTimeClick = new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                int i = (int) v.getTag();\r\n                Button button1 = optionPopupView.findViewWithTag(i);\r\n                Button button2 = optionPopupView.findViewWithTag(i==8?9:8);\r\n                button1.setActivated(true);\r\n                button2.setActivated(false);\r\n            }\r\n        };\r\n\r\n        startTime.setOnClickListener(onStartEndTimeClick);\r\n        endTime.setOnClickListener(onStartEndTimeClick);\r\n\r\n        return popupOptions;\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////\r\n    // LOCATION //\r\n    /////////////////////////////////////////////////////////\r\n\r\n    // Ask the permission to the user to use his location\r\n    private void requestLocalisationPermission(){\r\n        // If the permission WAS DENIED PREVIOUSLY,\r\n        // we open a dialog to ask for the permission to access to the user's location\r\n        if (ActivityCompat.shouldShowRequestPermissionRationale(this,\r\n                Manifest.permission.ACCESS_FINE_LOCATION)) {\r\n\r\n            new AlertDialog.Builder(this)\r\n                    .setTitle(\"Autorisation n√©cessaire\")\r\n                    .setMessage(\"Nous avons besoin de votre autorisation pour utiliser votre g√©olocalisation.\")\r\n                    .setPositiveButton(\"autoriser\", new DialogInterface.OnClickListener(){\r\n                        @Override\r\n                        public void onClick(DialogInterface dialog, int which) {\r\n                            // If the user click on this button, we ask her/him the permission to use her/his position\r\n                            ActivityCompat.requestPermissions(MainActivity.this, new String[]{\r\n                                    Manifest.permission.ACCESS_FINE_LOCATION}, POSITION_PERMISSION_CODE);\r\n                            popUp.dismiss();\r\n                        }\r\n                    })\r\n                    .setNegativeButton(\"annuler\", new DialogInterface.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(DialogInterface dialog, int which) {\r\n                            dialog.dismiss();\r\n                        }\r\n                    })\r\n                    .create().show();\r\n        } else {\r\n            // If the permission was NOT denied previously, we ask for the permission to access to the user's position\r\n            ActivityCompat.requestPermissions(this, new String[] {\r\n                    Manifest.permission.ACCESS_FINE_LOCATION}, POSITION_PERMISSION_CODE);\r\n        }\r\n    }\r\n\r\n    // Return the answer of the location permission request in a \"short popup window\" at the bottom of the screen\r\n    // and print the user's position if we have the permission\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        if (requestCode == POSITION_PERMISSION_CODE) {\r\n            if (grantResults.length > 0 && grantResults[0] ==  PackageManager.PERMISSION_GRANTED) {\r\n                Toast.makeText(this, \"Autorisation ACCORD√âE\", Toast.LENGTH_SHORT).show();\r\n                // If the permission to access to the user's location is  allowed AND if the GPS' phone is activated,\r\n                // we use this location\r\n                if (ContextCompat.checkSelfPermission(MainActivity.this,\r\n                        Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED && GpsStatus) {\r\n                    popUp.dismiss();\r\n                    getLocation();\r\n                }\r\n            }\r\n            else {\r\n                Toast.makeText(this, \"Autorisation REFUS√âE\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Ask to the user to activate his location\r\n    private void showAlertMessageNoGps() {\r\n        new AlertDialog.Builder(MainActivity.this)\r\n                .setTitle(\"Echec de la localisation\")\r\n                .setMessage(\"Votre localisation n'est pas activ√©e. Voulez-vous l'activer ?\")\r\n                .setPositiveButton(\"oui\", new DialogInterface.OnClickListener(){\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        startActivity(new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));\r\n                        ActivityCompat.requestPermissions(MainActivity.this, new String[]{\r\n                                Manifest.permission.ACCESS_FINE_LOCATION}, POSITION_PERMISSION_CODE);\r\n                        popUp.dismiss();\r\n                    }\r\n                })\r\n                .setNegativeButton(\"non\", new DialogInterface.OnClickListener(){\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        dialog.dismiss();\r\n                    }\r\n                })\r\n                .create().show();\r\n    }\r\n\r\n    // Return user's position in coordinates\r\n    @SuppressLint(\"MissingPermission\")\r\n    private void getLocation(){\r\n        locationManager = (LocationManager) getApplicationContext().getSystemService(LOCATION_SERVICE);\r\n        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 5000, 5, MainActivity.this);\r\n    }\r\n\r\n    // Print user's position\r\n    // If we need to convert the coordinates in an address, we need to do it here with a \"geocoder\"\r\n    public void onLocationChanged(Location location) {\r\n        String position = location.getLatitude() + \",\" + location.getLongitude();\r\n        buttonClicked.setText(position);\r\n        buttonClicked.setSelection(buttonClicked.length()); // set cursor at end of text\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////\r\n    // LOCATION END //\r\n    /////////////////////////////////////////////////////////\r\n\r\n    // Callback when the user clicks on an item in the listView\r\n    private AdapterView.OnItemClickListener onItemClickListener(){\r\n        return new AdapterView.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n                if (id>=0) {\r\n                    buttonClicked.setText(addressList.get((int)id));\r\n                    buttonClicked.setSelection(buttonClicked.length()); // set cursor at end of text\r\n                    popUp.dismiss();\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    // Method called when the user clicks on \"search\" or \"option\"\r\n    @Override\r\n    public void onClick(View v){\r\n        pdaLat = null;\r\n        pdaLong = null;\r\n        pddLat = null;\r\n        pddLong = null;\r\n        int i = (int) v.getTag();\r\n        start = startPoint.getText().toString();\r\n        end = endPoint.getText().toString();\r\n        // things to do when user clicks search\r\n        if(i==2){\r\n            if (start.length() == 0 || end.length() == 0){\r\n                // if nothing has been typed in, nothing happens and you get a message\r\n                Toast.makeText(MainActivity.this, \"Vous devez remplir les deux champs\", Toast.LENGTH_SHORT).show();\r\n            } else if (start.equals(end)) {\r\n                // if both addresses are the same, do nothing\r\n                Toast.makeText(MainActivity.this, \"Veuillez rentrer deux adresses diff√©rentes\",Toast.LENGTH_SHORT).show();\r\n            }\r\n            else {\r\n                int nbLastAdd = Preferences.getNumberOfLastAddresses(\"lastAddress\",MainActivity.this); // get the number of addresses in the history\r\n                int[] sameAddresses = getSameAddresses(start,end); // returns which of the start or end adress already exists in the list and its index in the list\r\n                // if none of the adresses already exist, add them\r\n                if (sameAddresses[0]==-1&&sameAddresses[1]==-1) {\r\n                    Preferences.addLastAddress(\"lastAddress\", 0, end, MainActivity.this);\r\n                    Preferences.addLastAddress(\"lastAddress\", 0, start, MainActivity.this);\r\n                    nbLastAdd = nbLastAdd + 2; // the number of adresses has increased by 2\r\n                }\r\n                // if the startpoint already exists, move it to first position and add endpoint\r\n                else if (sameAddresses[0]!=-1&&sameAddresses[1]==-1){\r\n                    Preferences.addLastAddress(\"lastAddress\", 0, end, MainActivity.this);\r\n                    Preferences.moveAddressFirst(sameAddresses[0]+1,MainActivity.this);\r\n                    nbLastAdd++; // the number of adresses has increased by 1\r\n                }\r\n                // if the endpoint already exists, move it to first position and add startpoint\r\n                else if (sameAddresses[0]==-1&&sameAddresses[1]!=-1) {\r\n                    Preferences.moveAddressFirst(sameAddresses[1],MainActivity.this);\r\n                    Preferences.addLastAddress(\"lastAddress\", 0, start, MainActivity.this);\r\n                    nbLastAdd++; // the number of adresses has increased by 1\r\n                }\r\n                // if both adresses already exist, we move both adresses to first position\r\n                else {\r\n                    Preferences.moveAddressFirst(sameAddresses[1], MainActivity.this);\r\n                    // if the endpoint was after the startpoint in the list, the index at which we have to find the adress is one higher\r\n                    Preferences.moveAddressFirst(sameAddresses[1]<sameAddresses[0]?sameAddresses[0]:sameAddresses[0]+1, MainActivity.this);\r\n                }\r\n                // check if number of addresses has gone over 3 and remove the ones over 3\r\n                if (nbLastAdd == 5) {\r\n                    Preferences.removeLastAddress(\"lastAddress\", nbLastAdd + 1, MainActivity.this);\r\n                    Preferences.removeLastAddress(\"lastAddress\", nbLastAdd, MainActivity.this);\r\n                } else if (nbLastAdd == 4) {\r\n                    Preferences.removeLastAddress(\"lastAddress\", nbLastAdd, MainActivity.this);\r\n                }\r\n                //Conversion addresses to spatial coordinates\r\n                //For the start point\r\n                Geocoder geocoderStart = new Geocoder(MainActivity.this, Locale.getDefault());\r\n                try {\r\n                    List addressListStart = geocoderStart.getFromLocationName(start, 1);\r\n                    if (addressListStart != null && addressListStart.size() > 0){\r\n                        Address addressStart = (Address) addressListStart.get(0);\r\n                        pddLat = addressStart.getLatitude();\r\n                        pddLong = addressStart.getLongitude();\r\n                    }\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                //For the end point\r\n                Geocoder geocoderEnd = new Geocoder(MainActivity.this, Locale.getDefault());\r\n                try {\r\n                    List addressListEnd = geocoderEnd.getFromLocationName(end, 1);\r\n                    if (addressListEnd != null && addressListEnd.size() > 0) {\r\n                        Address addressEnd = (Address) addressListEnd.get(0);\r\n                        pdaLat = addressEnd.getLatitude();\r\n                        pdaLong = addressEnd.getLongitude();\r\n                    }\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                /*pdaLat = 47.23592051820992;\r\n                pdaLong = -1.638742699120431;\r\n                pddLat = 47.24811;\r\n                pddLong = -1.54978;*/\r\n                int[] options = {0,2,0,4};      // rien = {0,0,0,0} et tout = {1,2,3,4}\r\n\r\n\r\n                int[] transport = new int[4];\r\n                for(int k=0;k<4;k++){\r\n                    if (options.length > 0){\r\n                        transport[k] = options[k];\r\n                    }else{\r\n                        transport[k] = k+1;\r\n                    }\r\n                }\r\n\r\n\r\n                //start itinerary calculation activity\r\n                Intent intent = new Intent(getApplicationContext(),LoadingPageActivity.class);\r\n                intent.putExtra(\"param1\", pdaLat);\r\n                intent.putExtra(\"param2\", pdaLong);\r\n                intent.putExtra(\"param3\", pddLat);\r\n                intent.putExtra(\"param4\", pddLong);\r\n                intent.putExtra(\"param5\", transport);\r\n                startActivity(intent);\r\n                finish();\r\n\r\n                Preferences.addAddress(\"startAddress\",start,MainActivity.this);\r\n                Preferences.addAddress(\"endAddress\",end,MainActivity.this);\r\n\r\n            }\r\n        }\r\n        // things to do when user clicks options\r\n        else if (i==3){\r\n                    popUp = showOptions();\r\n                    dimPopup.setVisibility(View.VISIBLE);\r\n                    popUp.showAtLocation(v,Gravity.CENTER,0,0);\r\n                }\r\n    }\r\n\r\n    // when the focus is on the edittext, display popupWindow, when the edittext loses focus, dismiss popupWindow\r\n    @Override\r\n    public void onFocusChange(View v, boolean hasFocus){\r\n        int i = (int) v.getTag();\r\n        buttonClicked = v.findViewWithTag(i);\r\n        if(hasFocus) {\r\n            popUp = showFavoriteAddresses();\r\n            popUp.showAsDropDown(v, 0, 10); // show popup like dropdown list\r\n        }\r\n        if(!hasFocus){\r\n            popUp.dismiss();\r\n        }\r\n    }\r\n\r\n    // This is used to check when the user clicks outside of the edittext // DONT CHANGE \\\\\r\n    @Override\r\n    public boolean dispatchTouchEvent(MotionEvent event) {\r\n        if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n            View v = getCurrentFocus();\r\n            if ( v instanceof EditText) {\r\n                Rect outRect = new Rect();\r\n                v.getGlobalVisibleRect(outRect);\r\n                if (!outRect.contains((int)event.getRawX(), (int)event.getRawY())) {\r\n                    v.clearFocus();\r\n                    InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\r\n                    imm.hideSoftInputFromWindow(v.getWindowToken(), 0);\r\n                }\r\n            }\r\n        }\r\n        return super.dispatchTouchEvent( event );\r\n    }\r\n\r\n    // returns the index of the adresses that already exist in the history list, returns -1 if doesnt exist\r\n    public int[] getSameAddresses(String start, String end){\r\n        int[] arr = new int[2];\r\n        arr[0]=-1;\r\n        arr[1]=-1;\r\n        for (int j = 0; j < Preferences.getNumberOfLastAddresses(\"lastAddress\",MainActivity.this); j++) {\r\n            String lastAddress = Preferences.getLastAddresses(\"lastAddress\", MainActivity.this).get(j);\r\n            if (start.equals(lastAddress)) {\r\n                arr[0]=j;\r\n            }\r\n            else if (end.equals(lastAddress)) {\r\n                arr[1]=j;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/helloworld/MainActivity.java	(revision a2c53f3c38ffa2996ec2451f9687150ef5c04f31)
+++ app/src/main/java/com/example/helloworld/MainActivity.java	(date 1610355008810)
@@ -614,6 +614,7 @@
                 pdaLong = -1.638742699120431;
                 pddLat = 47.24811;
                 pddLong = -1.54978;*/
+
                 int[] options = {0,2,0,4};      // rien = {0,0,0,0} et tout = {1,2,3,4}
 
 
@@ -637,6 +638,7 @@
                 startActivity(intent);
                 finish();
 
+
                 Preferences.addAddress("startAddress",start,MainActivity.this);
                 Preferences.addAddress("endAddress",end,MainActivity.this);
 
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_05_01_2021_10_18__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_05_01_2021_10_18__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_05_01_2021_10_17__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_05_01_2021_10_17__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_05_01_2021_09_39__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_05_01_2021_09_39__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_04_01_2021_12_00__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_04_01_2021_12_00__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_07_01_2021_09_34__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_07_01_2021_09_34__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_04_01_2021_11_59__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_04_01_2021_11_59__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_04_01_2021_11_53__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_04_01_2021_11_53__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_05_01_2021_17_24__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_05_01_2021_17_24__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_05_01_2021_15_00__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_05_01_2021_15_00__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_05_01_2021_14_53__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_05_01_2021_14_53__Default_Changelist_.xml
