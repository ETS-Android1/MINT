Index: app/src/main/java/com/example/helloworld/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.helloworld;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.location.Address;\r\nimport android.location.Geocoder;\r\nimport android.location.Location;\r\nimport android.location.LocationListener;\r\nimport android.location.LocationManager;\r\nimport android.content.DialogInterface;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Rect;\r\nimport android.os.Bundle;\r\nimport android.preference.PreferenceManager;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.util.Pair;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ListView;\r\nimport android.widget.PopupWindow;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\nimport org.osmdroid.api.IMapController;\r\nimport org.osmdroid.config.Configuration;\r\nimport org.osmdroid.tileprovider.tilesource.TileSourceFactory;\r\nimport org.osmdroid.util.GeoPoint;\r\nimport org.osmdroid.views.MapView;\r\n\r\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener, View.OnFocusChangeListener, LocationListener {\r\n    private final int REQUEST_PERMISSIONS_REQUEST_CODE = 1;\r\n    IMapController mapController;\r\n    private EditText startPoint;\r\n    private EditText startPoint2; // for starPoint/endPoint inversion\r\n    private EditText endPoint;\r\n    private EditText latitude;\r\n    private EditText longitude;\r\n    private Button search;\r\n    private final int POSITION_PERMISSION_CODE = 1;\r\n\r\n    ArrayList<String> lastAddressList;\r\n    ArrayList<String> addressList;\r\n    ListView addressListView;\r\n    String start;\r\n    String end;\r\n    private Double pdaLat;\r\n    private Double pdaLong;\r\n    private Double pddLat;\r\n    private Double pddLong;\r\n\r\n    EditText buttonClicked;\r\n    PopupWindow popUp;\r\n    LocationManager locationManager;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        //Preferences.clearLastAddresses(this);\r\n\r\n        startPoint = findViewById(R.id.PointDeDepart);\r\n        endPoint = findViewById(R.id.PointDarrivee);\r\n        search = findViewById(R.id.recherche);\r\n\r\n        start = startPoint.getText().toString();\r\n        end = endPoint.getText().toString();\r\n\r\n        // check if the editText is empty and if so disable add button\r\n        TextWatcher textChangedListener = new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                search.setEnabled(s.toString().length()!=0);\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable s) {\r\n\r\n            }\r\n        };\r\n\r\n        startPoint.setOnFocusChangeListener(this);\r\n        startPoint.addTextChangedListener(textChangedListener);\r\n        endPoint.setOnFocusChangeListener(this);\r\n        endPoint.addTextChangedListener(textChangedListener);\r\n        search.setOnClickListener(this);\r\n\r\n        startPoint.setTag(0);\r\n        endPoint.setTag(1);\r\n        search.setTag(2);\r\n\r\n        Context context = getApplicationContext();\r\n        Configuration.getInstance().load(context, PreferenceManager.getDefaultSharedPreferences(getApplicationContext()));\r\n\r\n        //Map centered around a point\r\n        MapView map = findViewById(R.id.mapView);\r\n        map.setTileSource(TileSourceFactory.MAPNIK); //render\r\n        map.setMultiTouchControls(true);\r\n        GeoPoint centerPoint = new GeoPoint(47.21, -1.55);\r\n        mapController = map.getController();\r\n        mapController.setZoom(15.0);\r\n        mapController.setCenter(centerPoint);\r\n\r\n        //Bottom Menu\r\n        BottomNavigationView bottomNav = findViewById(R.id.bottom_navigation);\r\n        bottomNav.setOnNavigationItemSelectedListener(new ActivityMenuSwitcher(this));\r\n        Menu menu = bottomNav.getMenu();\r\n        MenuItem menuItem = menu.getItem(0);\r\n        menuItem.setChecked(true);\r\n    }\r\n\r\n    private PopupWindow showFavoriteAddresses() {\r\n\r\n        // initialize a pop up window type\r\n        PopupWindow popupWindow = new PopupWindow(this);\r\n\r\n        lastAddressList = Preferences.getLastAddresses(\"lastAddress\",this);\r\n        addressList = Preferences.getPrefAddresses(\"Address\", this);\r\n        lastAddressList.add(0,\"Mes dernières adresses :\");\r\n        addressList.add(0,\"Mes adresses favorites :\");\r\n\r\n        addressList.addAll(0,lastAddressList);\r\n\r\n        CustomListAdapter adapter = new CustomListAdapter(this, addressList);\r\n\r\n        addressListView = new ListView(this);\r\n        // add location button to the list\r\n        TextView localisationRequest = new TextView(this);\r\n        localisationRequest.setText(R.string.position_request);\r\n        localisationRequest.setPadding(30,30,30,0);\r\n        addressListView.addHeaderView(localisationRequest);\r\n        addressListView.setHeaderDividersEnabled(false);\r\n\r\n        // set our adapter and pass our pop up window contents\r\n        addressListView.setAdapter(adapter);\r\n        addressListView.setDivider(null);\r\n        addressListView.setDividerHeight(0);\r\n\r\n        // set on item selected\r\n        addressListView.setOnItemClickListener(onItemClickListener());\r\n\r\n        //User's position\r\n        localisationRequest.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                // If the permission is already allowed, we use the user's position\r\n                if (ContextCompat.checkSelfPermission(MainActivity.this,\r\n                        Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\r\n                    //buttonClicked.setText(\"Ma position\");\r\n                    //buttonClicked.setSelection(buttonClicked.length()); // set cursor at end of text\r\n                    popUp.dismiss();\r\n                    getLocation();\r\n                }\r\n                // If not, we ask the permission to use his position\r\n                else {\r\n                    requestLocalisationPermission();\r\n                }\r\n            }\r\n        });\r\n\r\n        // some other visual settings for popup window\r\n        popupWindow.setFocusable(false);\r\n        popupWindow.setWidth((int)getResources().getDimension(R.dimen.start_point_width));\r\n        popupWindow.setBackgroundDrawable(getResources().getDrawable(R.drawable.layout_bg_popup));\r\n        popupWindow.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);\r\n\r\n        // set the listview as popup content\r\n        popupWindow.setContentView(addressListView);\r\n\r\n        // startPoint/endPoint inversion\r\n        Button inversionButton = findViewById(R.id.inversion);\r\n        inversionButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                //startPoint2.setText(startPoint.getText());$\r\n                Editable startText = startPoint.getText();\r\n                Editable endText = endPoint.getText();\r\n                endPoint.setText(startText);\r\n                startPoint.setText(endText);\r\n            }\r\n        });\r\n\r\n        return popupWindow;\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////\r\n    // GEOLOCATION //\r\n    /////////////////////////////////////////////////////////\r\n\r\n    // Ask the permission to the user to use his geolocalisation\r\n    private void requestLocalisationPermission(){\r\n        if (ActivityCompat.shouldShowRequestPermissionRationale(this,\r\n                Manifest.permission.ACCESS_FINE_LOCATION)) {\r\n\r\n            new AlertDialog.Builder(this)\r\n                    .setTitle(\"Autorisation nécessaire\")\r\n                    .setMessage(\"Nous avons besoin de votre autorisation pour utiliser votre géolocalisation.\")\r\n                    .setPositiveButton(\"autoriser\", new DialogInterface.OnClickListener(){\r\n                        @Override\r\n                        public void onClick(DialogInterface dialog, int which) {\r\n                            ActivityCompat.requestPermissions(MainActivity.this, new String[]{\r\n                                    Manifest.permission.ACCESS_FINE_LOCATION}, POSITION_PERMISSION_CODE);\r\n                            buttonClicked.setText(\"Ma position\");\r\n                            buttonClicked.setSelection(buttonClicked.length()); // set cursor at end of text\r\n                            popUp.dismiss();\r\n                        }\r\n                    })\r\n                    .setNegativeButton(\"annuler\", new DialogInterface.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(DialogInterface dialog, int which) {\r\n                            dialog.dismiss();\r\n                        }\r\n                    })\r\n                    .create().show();\r\n        } else {\r\n            ActivityCompat.requestPermissions(this, new String[] {\r\n                    Manifest.permission.ACCESS_FINE_LOCATION}, POSITION_PERMISSION_CODE);\r\n        }\r\n    }\r\n\r\n    // Return the answer of the localisation permission request\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        if (requestCode == POSITION_PERMISSION_CODE) {\r\n            if (grantResults.length > 0 && grantResults[0] ==  PackageManager.PERMISSION_GRANTED) {\r\n                Toast.makeText(this, \"Autorisation ACCORDÉE\", Toast.LENGTH_SHORT).show();\r\n            }\r\n            else {\r\n                Toast.makeText(this, \"Autorisation REFUSÉE\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Callback when the user clicks on an item in the listView\r\n    // Return user's position in coordinates\r\n    @SuppressLint(\"MissingPermission\")\r\n    private void getLocation(){\r\n        locationManager = (LocationManager) getApplicationContext().getSystemService(LOCATION_SERVICE);\r\n        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 5000, 5, MainActivity.this);\r\n    }\r\n\r\n    // Print user's position\r\n    // If we need to convert the coordinates in an address, we need to do it here with a \"geocoder\"\r\n    public void onLocationChanged(Location location) {\r\n        String position = location.getLatitude() + \",\" + location.getLongitude();\r\n        buttonClicked.setText(position);\r\n        buttonClicked.setSelection(buttonClicked.length()); // set cursor at end of text\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////\r\n    // GEOLOCATION //\r\n    /////////////////////////////////////////////////////////\r\n\r\n    private AdapterView.OnItemClickListener onItemClickListener(){\r\n        return new AdapterView.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n                if (id>=0) {\r\n                    buttonClicked.setText(addressList.get((int)id));\r\n                    buttonClicked.setSelection(buttonClicked.length()); // set cursor at end of text\r\n                    popUp.dismiss();\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    // Method called when the user clicks on \"search\" (tag = 2)\r\n    @Override\r\n    public void onClick(View v){\r\n        pdaLat = null;\r\n        pdaLong = null;\r\n        pddLat = null;\r\n        pddLong = null;\r\n        int i = (int) v.getTag();\r\n        start = startPoint.getText().toString()+\",Nantes\";\r\n        end = endPoint.getText().toString()+\",Nantes\";\r\n        if(i==2) {\r\n            if (start.length() == 0 || end.length() == 0) {\r\n                // if nothing has been typed in, nothing happens and you get a message\r\n                Toast.makeText(MainActivity.this, \"Vous devez remplir les deux champs\", Toast.LENGTH_SHORT).show();\r\n            } else if (start.equals(end)) {\r\n                // if both addresses are the same, do nothing\r\n                Toast.makeText(MainActivity.this, \"Veuillez rentrer deux adresses différentes\", Toast.LENGTH_SHORT).show();\r\n            } else {\r\n                int nbLastAdd = Preferences.getNumberOfLastAddresses(\"lastAddress\", MainActivity.this); // get the number of addresses in the history\r\n                //int[] sameAddresses = getSameAddresses(start,end);\r\n                Preferences.addLastAddress(\"lastAddress\", 0, endPoint.getText().toString(), MainActivity.this);\r\n                Preferences.addLastAddress(\"lastAddress\", 0, startPoint.getText().toString(), MainActivity.this);\r\n                nbLastAdd = nbLastAdd + 2;\r\n                if (nbLastAdd == 5) {\r\n                    Preferences.removeLastAddress(\"lastAddress\", nbLastAdd + 1, MainActivity.this);\r\n                    Preferences.removeLastAddress(\"lastAddress\", nbLastAdd, MainActivity.this);\r\n                } else if (nbLastAdd == 4) {\r\n                    Preferences.removeLastAddress(\"lastAddress\", nbLastAdd, MainActivity.this);\r\n                }\r\n                //Conversion addresses to spatial coordinates\r\n                //For the start point\r\n                Geocoder geocoderStart = new Geocoder(MainActivity.this, Locale.getDefault());\r\n                try {\r\n                    List addressListStart = geocoderStart.getFromLocationName(start, 1);\r\n                    if (addressListStart != null && addressListStart.size() > 0){\r\n                        Address addressStart = (Address) addressListStart.get(0);\r\n                        Double pddLat = addressStart.getLatitude();\r\n                        Double pddLong = addressStart.getLongitude();\r\n                    }\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                //For the end point\r\n                Geocoder geocoderEnd = new Geocoder(MainActivity.this, Locale.getDefault());\r\n                try {\r\n                    List addressListEnd = geocoderEnd.getFromLocationName(end, 1);\r\n                    if (addressListEnd != null && addressListEnd.size() > 0) {\r\n                        Address addressEnd = (Address) addressListEnd.get(0);\r\n                        pdaLat = addressEnd.getLatitude();\r\n                        pdaLong = addressEnd.getLongitude();\r\n                    }\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                //start itinerary calculation\r\n                Intent intent = new Intent(getApplicationContext(),LoadingPageActivity.class);\r\n                intent.putExtra(\"pddLat\", pddLat);\r\n                intent.putExtra(\"pddLat\", pddLong);\r\n                intent.putExtra(\"pddLat\", pdaLat);\r\n                intent.putExtra(\"pddLat\", pdaLong);\r\n\r\n                startActivity(intent);\r\n                finish();\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    // when the focus is on the edittext, display popupWindow, when the edittext loses focus, dismiss popupWindow\r\n    @Override\r\n    public void onFocusChange(View v, boolean hasFocus){\r\n        int i = (int) v.getTag();\r\n        buttonClicked = v.findViewWithTag(i);\r\n        if(hasFocus) {\r\n            popUp = showFavoriteAddresses();\r\n            popUp.showAsDropDown(v, 0, 10); // show popup like dropdown list\r\n        }\r\n        if(!hasFocus){\r\n            popUp.dismiss();\r\n        }\r\n    }\r\n\r\n    // This is used to check when the user clicks outside of the edittext\r\n    @Override\r\n    public boolean dispatchTouchEvent(MotionEvent event) {\r\n        if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n            View v = getCurrentFocus();\r\n            if ( v instanceof EditText) {\r\n                Rect outRect = new Rect();\r\n                v.getGlobalVisibleRect(outRect);\r\n                if (!outRect.contains((int)event.getRawX(), (int)event.getRawY())) {\r\n                    v.clearFocus();\r\n                    InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\r\n                    imm.hideSoftInputFromWindow(v.getWindowToken(), 0);\r\n                }\r\n            }\r\n        }\r\n        return super.dispatchTouchEvent( event );\r\n    }\r\n\r\n    public int[] getSameAddresses(String start, String end){\r\n        int[] arr = new int[2];\r\n        arr[0]=-1;\r\n        arr[1]=-1;\r\n        if(Preferences.getNumberOfLastAddresses(\"lastAddress\",MainActivity.this)==0){\r\n            arr[0]=arr[1]=-1;\r\n        }\r\n        else {\r\n            for (int j = 0; j < Preferences.getNumberOfLastAddresses(\"lastAddress\",MainActivity.this); j++) {\r\n                String lastAddress = Preferences.getLastAddresses(\"lastAddress\", MainActivity.this).get(j);\r\n                if (start.equals(lastAddress)) {\r\n                    arr[0]=j;\r\n                }\r\n                if (end.equals(lastAddress)) {\r\n                    arr[1]=j;\r\n                }\r\n                if (!(start.equals(lastAddress)||end.equals(lastAddress))){\r\n                    arr[0]=arr[1]=-1;\r\n                }\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/helloworld/MainActivity.java	(revision 2ce86e43328ce12864c39c877f82d100caab5d32)
+++ app/src/main/java/com/example/helloworld/MainActivity.java	(date 1609757993912)
@@ -43,7 +43,6 @@
 
 import com.google.android.material.bottomnavigation.BottomNavigationView;
 
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
@@ -70,10 +69,6 @@
     ListView addressListView;
     String start;
     String end;
-    private Double pdaLat;
-    private Double pdaLong;
-    private Double pddLat;
-    private Double pddLong;
 
     EditText buttonClicked;
     PopupWindow popUp;
@@ -124,14 +119,14 @@
         Context context = getApplicationContext();
         Configuration.getInstance().load(context, PreferenceManager.getDefaultSharedPreferences(getApplicationContext()));
 
-        //Map centered around a point
+        //Map
         MapView map = findViewById(R.id.mapView);
         map.setTileSource(TileSourceFactory.MAPNIK); //render
         map.setMultiTouchControls(true);
-        GeoPoint centerPoint = new GeoPoint(47.21, -1.55);
+        GeoPoint startPoint = new GeoPoint(47.21, -1.55);
         mapController = map.getController();
         mapController.setZoom(15.0);
-        mapController.setCenter(centerPoint);
+        mapController.setCenter(startPoint);
 
         //Bottom Menu
         BottomNavigationView bottomNav = findViewById(R.id.bottom_navigation);
@@ -299,13 +294,9 @@
     // Method called when the user clicks on "search" (tag = 2)
     @Override
     public void onClick(View v){
-        pdaLat = null;
-        pdaLong = null;
-        pddLat = null;
-        pddLong = null;
         int i = (int) v.getTag();
-        start = startPoint.getText().toString()+",Nantes";
-        end = endPoint.getText().toString()+",Nantes";
+        start = startPoint.getText().toString();
+        end = endPoint.getText().toString();
         if(i==2) {
             if (start.length() == 0 || end.length() == 0) {
                 // if nothing has been typed in, nothing happens and you get a message
@@ -325,39 +316,22 @@
                 } else if (nbLastAdd == 4) {
                     Preferences.removeLastAddress("lastAddress", nbLastAdd, MainActivity.this);
                 }
-                //Conversion addresses to spatial coordinates
-                //For the start point
-                Geocoder geocoderStart = new Geocoder(MainActivity.this, Locale.getDefault());
-                try {
-                    List addressListStart = geocoderStart.getFromLocationName(start, 1);
-                    if (addressListStart != null && addressListStart.size() > 0){
-                        Address addressStart = (Address) addressListStart.get(0);
-                        Double pddLat = addressStart.getLatitude();
-                        Double pddLong = addressStart.getLongitude();
-                    }
-                } catch (IOException e) {
-                    e.printStackTrace();
-                }
-                //For the end point
-                Geocoder geocoderEnd = new Geocoder(MainActivity.this, Locale.getDefault());
-                try {
-                    List addressListEnd = geocoderEnd.getFromLocationName(end, 1);
-                    if (addressListEnd != null && addressListEnd.size() > 0) {
-                        Address addressEnd = (Address) addressListEnd.get(0);
-                        pdaLat = addressEnd.getLatitude();
-                        pdaLong = addressEnd.getLongitude();
-                    }
-                } catch (IOException e) {
-                    e.printStackTrace();
-                }
+
 
-                //start itinerary calculation
+                //conversion addresses to coord
+                String pdaLat, pdaLong, pddLat, pddLong;
+                pdaLat = "0";
+                pdaLong = "1";
+                pddLat = "2";
+                pddLong = "3";
+
+
+                //start itinerary calculation activity
                 Intent intent = new Intent(getApplicationContext(),LoadingPageActivity.class);
-                intent.putExtra("pddLat", pddLat);
-                intent.putExtra("pddLat", pddLong);
-                intent.putExtra("pddLat", pdaLat);
-                intent.putExtra("pddLat", pdaLong);
-
+                intent.putExtra("param1", pdaLat);
+                intent.putExtra("param2", pdaLong);
+                intent.putExtra("param3", pddLong);
+                intent.putExtra("param4", pddLong);
                 startActivity(intent);
                 finish();
             }
